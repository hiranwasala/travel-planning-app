---
- name: Deploy Travel Planning App
  hosts: web
  become: yes
  vars:
    app_dir: ${APP_DIR}
    backend_image: "hiran86/travel-planning-app-backend:{{ backend_image_tag }}"
    frontend_image: "hiran86/travel-planning-app-frontend:{{ frontend_image_tag }}"
  
  tasks:
    - name: Install Docker
      apt:
        name:
          - docker.io
          - docker-compose-plugin
        update_cache: yes
        state: present
      when: ansible_os_family == 'Debian'

    # 2. Install Docker (official way)
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes

    - name: Install Docker components
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes

    # 3. Install Python Docker SDK
    - name: Install Docker SDK for Python
      pip:
        name: docker>=6.0.0
        executable: pip3

    # 4. Configure Docker permissions
    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    # 5. Create application directory
    - name: Ensure app directory exists
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'
        owner: ubuntu
        group: ubuntu

    # 6. Deploy docker-compose file
    - name: Copy docker-compose.yml
      template:
        src: docker-compose.yml
        dest: "{{ docker_compose_file }}"
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    # 7. Start containers with version detection
    - name: Start containers with Docker Compose
      block:
        - name: Check for Docker Compose v2
          command: docker compose version
          register: compose_version_check
          changed_when: false
          ignore_errors: yes

        - name: Start containers using v2
          command: >
            docker compose -f {{ docker_compose_file }} up -d
            --pull always
          args:
            chdir: "{{ app_dir }}"
          when: compose_version_check is success

        - name: Start containers using v1 (fallback)
          command: >
            docker-compose -f {{ docker_compose_file }} up -d
            --pull always
          args:
            chdir: "{{ app_dir }}"
          when: compose_version_check is failed
      become: yes
      become_user: ubuntu

    # 8. Verification
    - name: Verify running containers
      command: docker ps
      register: running_containers
      changed_when: false

    - name: Show container status
      debug:
        var: running_containers.stdout_lines
